<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ztl.gym.storage.mapper.StorageOutMapper">

    <resultMap type="StorageOut" id="StorageOutResult">
        <result property="id"    column="id"    />
        <result property="companyId"    column="company_id"    />
        <result property="tenantId"    column="tenant_id"    />
        <result property="status"    column="status"    />
        <result property="outNo"    column="out_no"    />
        <result property="extraNo"    column="extra_no"    />
        <result property="productId"    column="product_id"    />
        <result property="batchNo"    column="batch_no"    />
        <result property="outNum"    column="out_num"    />
        <result property="actOutNum"    column="act_out_num"    />
        <result property="storageFrom"    column="storage_from"    />
        <result property="storageTo"    column="storage_to"    />
        <result property="fromStorageId"    column="from_storage_id"    />
        <result property="toStorageId"    column="to_storage_id"    />
        <result property="remark"    column="remark"    />
        <result property="createUser"    column="create_user"    />
        <result property="createTime"    column="create_time"    />
        <result property="outTime"    column="out_time"    />
        <result property="updateUser"    column="update_user"    />
        <result property="updateTime"    column="update_time"    />
        <result property="createUserName"    column="create_user_name"    />
        <result property="updateUserName"    column="update_user_name"    />
        <result property="storageFromName"    column="storage_from_name"    />
        <result property="storageToName"    column="storage_to_name"    />
        <result property="fromStorageIdName"    column="from_storage_id_name"    />
        <result property="productName" column="product_name"/>
        <result property="productNo" column="product_no"/>
    </resultMap>

    <resultMap type="HashMap" id="map">
        <result property="code"    column="code"    />
        <result property="productNo"    column="product_no"    />
        <result property="productName"    column="product_name"    />
        <result property="batchNo"    column="batch_no"    />
        <result property="num"    column="num"    />
    </resultMap>

    <sql id="selectStorageOutVo">
        select so.id,so.company_id,so.tenant_id,so.status,so.out_no,extra_no,so.product_id,so.batch_no,so.out_num,so.act_out_num,so.storage_from,so.storage_to,
        so.from_storage_id,so.to_storage_id,so.remark,so.create_user,so.create_time,so.out_time,so.update_user,so.update_time
        ,suc.nick_name as create_user_name,suu.nick_name as update_user_name,
        sd.dept_name as storage_from_name,sd2.dept_name as storage_to_name,s.storage_name as from_storage_id_name
        ,p.product_name,p.product_no
        from t_storage_out so
        left join sys_dept sd on sd.dept_id=so.storage_from
        left join sys_dept sd2 on sd2.dept_id=so.storage_to
        left join t_storage s on s.id=so.from_storage_id
        LEFT JOIN sys_user suc ON suc.user_id = so.create_user
        LEFT JOIN sys_user suu ON suu.user_id = so.update_user
        left join t_product p on p.id=so.product_id
    </sql>

    <select id="selectStorageOutList" parameterType="StorageOut" resultMap="StorageOutResult">
        <include refid="selectStorageOutVo"/>
        <where>  so.status!=9
            <if test="companyId != null "> and so.company_id = #{companyId}</if>
            <if test="tenantId != null "> and so.tenant_id = #{tenantId}</if>
            <if test="status != null "> and so.status = #{status}</if>
            <if test="outNo != null  and outNo != ''"> and so.out_no = #{outNo}</if>
            <if test="extraNo != null  and extraNo != ''"> and so.extra_no = #{extraNo}</if>
            <if test="productId != null "> and so.product_id = #{productId}</if>
            <if test="batchNo != null  and batchNo != ''"> and so.batch_no = #{batchNo}</if>
            <if test="outNum != null "> and so.out_num = #{outNum}</if>
            <if test="actOutNum != null "> and so.act_out_num = #{actOutNum}</if>
            <if test="storageFrom != null  and storageFrom != ''"> and so.storage_from = #{storageFrom}</if>
            <if test="storageTo != null  and storageTo != ''"> and so.storage_to = #{storageTo}</if>
            <if test="fromStorageId != null "> and so.from_storage_id = #{fromStorageId}</if>
            <if test="toStorageId != null "> and so.to_storage_id = #{toStorageId}</if>
            <if test="outTime != null "> and so.out_time = #{outTime}</if>
            <if test="beginTime != null ">and so.create_time &gt;= #{beginTime}</if>
            <if test="endTime != null ">and so.create_time &lt;= #{endTime}</if>
        </where>
        ${@com.ztl.gym.storage.service.impl.StorageServiceImpl@getMyTenantId('and so.tenant_id ')}
        order by so.create_time desc
    </select>

    <select id="selectStorageOutById" parameterType="Long" resultMap="StorageOutResult">
        <include refid="selectStorageOutVo"/>
        where so.id = #{id}
    </select>

    <select id="getCodeDetailById" resultMap="map">
        select cf.code,p.product_no,p.product_name,si.batch_no,1 as num from t_product p
        left join t_storage_out si on si.product_id=p.id
        left join t_out_code_flow cf on cf.storage_record_id=si.id
        where si.id=#{id} and cf.company_id = #{companyId}
        order by code
    </select>

    <insert id="insertStorageOut" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        insert into t_storage_out
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="companyId != null">company_id,</if>
            <if test="tenantId != null">tenant_id,</if>
            <if test="status != null">status,</if>
            <if test="outNo != null">out_no,</if>
            <if test="extraNo != null">extra_no,</if>
            <if test="productId != null">product_id,</if>
            <if test="batchNo != null">batch_no,</if>
            <if test="outNum != null">out_num,</if>
            <if test="actOutNum != null">act_out_num,</if>
            <if test="storageFrom != null">storage_from,</if>
            <if test="storageTo != null">storage_to,</if>
            <if test="fromStorageId != null">from_storage_id,</if>
            <if test="toStorageId != null">to_storage_id,</if>
            <if test="remark != null">remark,</if>
            <if test="createUser != null">create_user,</if>
            <if test="createTime != null">create_time,</if>
            <if test="outTime != null">out_time,</if>
            <if test="updateUser != null">update_user,</if>
            <if test="updateTime != null">update_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="companyId != null">#{companyId},</if>
            <if test="tenantId != null">#{tenantId},</if>
            <if test="status != null">#{status},</if>
            <if test="outNo != null">#{outNo},</if>
            <if test="extraNo != null">#{extraNo},</if>
            <if test="productId != null">#{productId},</if>
            <if test="batchNo != null">#{batchNo},</if>
            <if test="outNum != null">#{outNum},</if>
            <if test="actOutNum != null">#{actOutNum},</if>
            <if test="storageFrom != null">#{storageFrom},</if>
            <if test="storageTo != null">#{storageTo},</if>
            <if test="fromStorageId != null">#{fromStorageId},</if>
            <if test="toStorageId != null">#{toStorageId},</if>
            <if test="remark != null">#{remark},</if>
            <if test="createUser != null">#{createUser},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="outTime != null">#{outTime},</if>
            <if test="updateUser != null">#{updateUser},</if>
            <if test="updateTime != null">#{updateTime},</if>
         </trim>
    </insert>

    <update id="updateStorageOut" parameterType="StorageOut">
        update t_storage_out
        <trim prefix="SET" suffixOverrides=",">
            <if test="companyId != null">company_id = #{companyId},</if>
            <if test="tenantId != null">tenant_id = #{tenantId},</if>
            <if test="status != null">status = #{status},</if>
            <if test="outNo != null">out_no = #{outNo},</if>
            <if test="extraNo != null">extra_no = #{extraNo},</if>
            <if test="productId != null">product_id = #{productId},</if>
            <if test="batchNo != null">batch_no = #{batchNo},</if>
            <if test="outNum != null">out_num = #{outNum},</if>
            <if test="actOutNum != null">act_out_num = #{actOutNum},</if>
            <if test="storageFrom != null">storage_from = #{storageFrom},</if>
            <if test="storageTo != null">storage_to = #{storageTo},</if>
            <if test="fromStorageId != null">from_storage_id = #{fromStorageId},</if>
            <if test="toStorageId != null">to_storage_id = #{toStorageId},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="createUser != null">create_user = #{createUser},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="outTime != null">out_time = #{outTime},</if>
            <if test="updateUser != null">update_user = #{updateUser},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </trim>
        where id = #{id}
    </update>
    <update id="updateOutStatusByCode" parameterType="Map">
        update t_storage_out set act_out_num=out_num,status=${@com.ztl.gym.storage.domain.StorageOut@STATUS_NORMAL}
        <if test="updateUser != null">,update_user = #{updateUser}</if>
        <if test="outTime != null">,out_time = #{outTime}</if>
        <if test="updateTime != null">,update_time = #{updateTime}</if>
        where id = #{id}
    </update>

    <delete id="deleteStorageOutById" parameterType="Long">
        update t_storage_out set status=${@com.ztl.gym.storage.domain.StorageOut@STATUS_DELETE} where id = #{id}
    </delete>

    <delete id="deleteByTransfer" parameterType="String">
        delete from  t_storage_out  where extra_no = #{value}
    </delete>

    <delete id="deleteStorageOutByIds" parameterType="String">
        update t_storage_out set status=${@com.ztl.gym.storage.domain.StorageOut@STATUS_DELETE} where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="backStorageOutById">
        update t_storage_out set status=#{status} where id = #{id}
    </delete>

    <select id="selectDayCount" resultMap="map">
        SELECT product_id,storage_to,sum(act_out_num) num,DATE_FORMAT(out_time,'%Y-%m-%d') out_time  FROM `t_storage_out` where `status`!=9 and
        product_id=#{productId} and storage_to = #{tenantId} and DATE_FORMAT(out_time,'%Y-%m-%d')=DATE_FORMAT(NOW(),'%Y-%m-%d')
        GROUP BY product_id,storage_to,DATE_FORMAT(out_time,'%Y-%m-%d')
    </select>


    <select id="selectCountByDept" resultType="java.lang.Integer" parameterType="Map">
        select case when sum( act_out_num ) is null then 0 else sum( act_out_num ) end count from  t_storage_out where status=1
        <if test="deptId != null">
            and company_id = #{deptId}
        </if>
        <if test="type != null and type == 1">
            and company_id = #{deptId}
        </if>
        <if test="beginTime !=null">
            and out_time &gt;= #{beginTime}
        </if>
        <if test="endTime !=null">
            and out_time &lt;= #{endTime}
        </if>
    </select>
    <select id="selectCountByWeek" resultType="java.util.Map">
        <if test="type != null and type == 1">
            SELECT
            DATE_FORMAT( mycreatedate, '%m-%d' ) AS countKey,
            ifnull( sum( pv.act_out_num ), 0 ) AS countValue
            FROM
            (
            SELECT
            curdate( ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 1 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 2 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 3 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 4 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 5 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 6 DAY ) AS mycreatedate
            ) AS total
            LEFT JOIN t_storage_out pv ON DATE_FORMAT( pv.create_time, '%Y-%m-%d' ) = total.mycreatedate
            <if test="deptId != null">
                and pv.company_id = #{deptId}
            </if>
            GROUP BY
            mycreatedate order by mycreatedate asc
        </if>
        <if test="type != null and type == 2">
            SELECT
            DATE_FORMAT( mycreatedate, '%m-%d' ) AS countKey,
            ifnull( sum( pv.act_out_num ), 0 ) AS countValue
            FROM
            (
            SELECT
            curdate( ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 1 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 2 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 3 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 4 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 5 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 6 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 7 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 8 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 9 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 10 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 11 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 12 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 13 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 14 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 15 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 16 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 17 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 18 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 19 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 20 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 21 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 22 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 23 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 24 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 25 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 26 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 27 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 28 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 29 DAY ) AS mycreatedate
            ) AS total
            LEFT JOIN t_storage_out pv ON DATE_FORMAT( pv.create_time, '%Y-%m-%d' ) = total.mycreatedate
            <if test="deptId != null">
                and pv.company_id = #{deptId}
            </if>
            GROUP BY
            mycreatedate order by mycreatedate asc
        </if>
        <if test="type != null and type == 3">
            SELECT
            DATE_FORMAT( mycreatedate, '%m-%d' ) AS countKey,
            ifnull( sum( pv.act_out_num ), 0 ) AS countValue
            FROM
            (
            SELECT
            curdate( ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 1 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 2 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 3 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 4 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 5 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 6 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 7 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 8 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 9 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 10 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 11 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 12 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 13 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 14 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 15 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 16 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 17 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 18 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 19 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 20 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 21 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 22 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 23 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 24 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 25 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 26 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 27 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 28 DAY ) AS mycreatedate UNION ALL
            SELECT
            date_sub( curdate( ), INTERVAL 29 DAY ) AS mycreatedate
            ) AS total
            LEFT JOIN t_storage_out pv ON DATE_FORMAT( pv.create_time, '%Y-%m-%d' ) = total.mycreatedate
            <if test="deptId != null">
                and pv.company_id = #{deptId}
            </if>
            GROUP BY
            mycreatedate order by mycreatedate asc
        </if>
    </select>
</mapper>
